--- fs/nfs/nfs4filelayout.c
+++ fs/nfs/nfs4filelayout.c
@@ -334,9 +334,6 @@
 		__func__, data->inode->i_ino,
 		data->args.pgbase, (size_t)data->args.count, offset);
 
-	if (test_bit(NFS_DEVICEID_INVALID, &FILELAYOUT_DEVID_NODE(lseg)->flags))
-		return PNFS_NOT_ATTEMPTED;
-
 	/* Retrieve the correct rpc_client for the byte range */
 	j = nfs4_fl_calc_j_index(lseg, offset);
 	idx = nfs4_fl_calc_ds_index(lseg, j);
@@ -347,7 +344,8 @@
 		set_bit(lo_fail_bit(IOMODE_READ), &lseg->pls_layout->plh_flags);
 		return PNFS_NOT_ATTEMPTED;
 	}
-	dprintk("%s USE DS: %s\n", __func__, ds->ds_remotestr);
+	dprintk("%s USE DS:ip %x %hu\n", __func__,
+		ntohl(ds->ds_ip_addr), ntohs(ds->ds_port));
 
 	/* No multipath support. Use first DS */
 	data->ds_clp = ds->ds_clp;
@@ -376,9 +374,6 @@
 	struct nfs_fh *fh;
 	int status;
 
-	if (test_bit(NFS_DEVICEID_INVALID, &FILELAYOUT_DEVID_NODE(lseg)->flags))
-		return PNFS_NOT_ATTEMPTED;
-
 	/* Retrieve the correct rpc_client for the byte range */
 	j = nfs4_fl_calc_j_index(lseg, offset);
 	idx = nfs4_fl_calc_ds_index(lseg, j);
@@ -389,9 +384,9 @@
 		set_bit(lo_fail_bit(IOMODE_READ), &lseg->pls_layout->plh_flags);
 		return PNFS_NOT_ATTEMPTED;
 	}
-	dprintk("%s ino %lu sync %d req %Zu@%llu DS: %s\n", __func__,
+	dprintk("%s ino %lu sync %d req %Zu@%llu DS:%x:%hu\n", __func__,
 		data->inode->i_ino, sync, (size_t) data->args.count, offset,
-		ds->ds_remotestr);
+		ntohl(ds->ds_ip_addr), ntohs(ds->ds_port));
 
 	data->write_done_cb = filelayout_write_done_cb;
 	data->ds_clp = ds->ds_clp;
@@ -454,10 +441,6 @@
 			goto out;
 	} else
 		dsaddr = container_of(d, struct nfs4_file_layout_dsaddr, id_node);
-	/* Found deviceid is being reaped */
-	if (test_bit(NFS_DEVICEID_INVALID, &dsaddr->id_node.flags))
-			goto out_put;
-
 	fl->dsaddr = dsaddr;
 
 	if (fl->first_stripe_index < 0 ||
@@ -668,7 +651,7 @@
  * return true  : coalesce page
  * return false : don't coalesce page
  */
-static bool
+bool
 filelayout_pg_test(struct nfs_pageio_descriptor *pgio, struct nfs_page *prev,
 		   struct nfs_page *req)
 {
@@ -679,6 +662,8 @@
 	    !nfs_generic_pg_test(pgio, prev, req))
 		return false;
 
+	if (!pgio->pg_lseg)
+		return 1;
 	p_stripe = (u64)prev->wb_index << PAGE_CACHE_SHIFT;
 	r_stripe = (u64)req->wb_index << PAGE_CACHE_SHIFT;
 	stripe_unit = FILELAYOUT_LSEG(pgio->pg_lseg)->stripe_unit;
@@ -689,52 +674,6 @@
 	return (p_stripe == r_stripe);
 }
 
-void
-filelayout_pg_init_read(struct nfs_pageio_descriptor *pgio,
-			struct nfs_page *req)
-{
-	BUG_ON(pgio->pg_lseg != NULL);
-
-	pgio->pg_lseg = pnfs_update_layout(pgio->pg_inode,
-					   req->wb_context,
-					   0,
-					   NFS4_MAX_UINT64,
-					   IOMODE_READ,
-					   GFP_KERNEL);
-	/* If no lseg, fall back to read through mds */
-	if (pgio->pg_lseg == NULL)
-		nfs_pageio_reset_read_mds(pgio);
-}
-
-void
-filelayout_pg_init_write(struct nfs_pageio_descriptor *pgio,
-			 struct nfs_page *req)
-{
-	BUG_ON(pgio->pg_lseg != NULL);
-
-	pgio->pg_lseg = pnfs_update_layout(pgio->pg_inode,
-					   req->wb_context,
-					   0,
-					   NFS4_MAX_UINT64,
-					   IOMODE_RW,
-					   GFP_NOFS);
-	/* If no lseg, fall back to write through mds */
-	if (pgio->pg_lseg == NULL)
-		nfs_pageio_reset_write_mds(pgio);
-}
-
-static const struct nfs_pageio_ops filelayout_pg_read_ops = {
-	.pg_init = filelayout_pg_init_read,
-	.pg_test = filelayout_pg_test,
-	.pg_doio = pnfs_generic_pg_readpages,
-};
-
-static const struct nfs_pageio_ops filelayout_pg_write_ops = {
-	.pg_init = filelayout_pg_init_write,
-	.pg_test = filelayout_pg_test,
-	.pg_doio = pnfs_generic_pg_writepages,
-};
-
 static bool filelayout_mark_pnfs_commit(struct pnfs_layout_segment *lseg)
 {
 	return !FILELAYOUT_LSEG(lseg)->commit_through_mds;
@@ -932,8 +871,7 @@
 	.owner			= THIS_MODULE,
 	.alloc_lseg		= filelayout_alloc_lseg,
 	.free_lseg		= filelayout_free_lseg,
-	.pg_read_ops		= &filelayout_pg_read_ops,
-	.pg_write_ops		= &filelayout_pg_write_ops,
+	.pg_test		= filelayout_pg_test,
 	.mark_pnfs_commit	= filelayout_mark_pnfs_commit,
 	.choose_commit_list	= filelayout_choose_commit_list,
 	.commit_pagelist	= filelayout_commit_pagelist,
@@ -956,7 +894,5 @@
 	pnfs_unregister_layoutdriver(&filelayout_type);
 }
 
-MODULE_ALIAS("nfs-layouttype4-1");
-
 module_init(nfs4filelayout_init);
 module_exit(nfs4filelayout_exit);
